# --------------------------------------------------------------------------------
# This is a bidsmap YAML file with the key-value mappings for the different BIDS
# datatypes (anat, func, dwi, etc). The datatype attributes are the keys that map
# onto the BIDS labels. The bidsmap data-structure should be 5 levels deep:
#
# dict       : dict     : list     : dict        : dict
# dataformat : datatype : run-item : bidsmapping : mapping-data
#
# NB:
# 1) Edit the bidsmap file to your needs before feeding it to bidscoiner.py
# 2) (Institute) users may create their own bidsmap_[template].yaml or
#    bidsmap_[sample].yaml file
#
# For more information, see: https://bidscoin.readthedocs.io
# --------------------------------------------------------------------------------


Options:
# --------------------------------------------------------------------------------
# General options and plugins
# --------------------------------------------------------------------------------
  bidscoin:
    version: 3.7.0-dev            # BIDScoin version (should correspond with the version in ../bidscoin/version.txt)
    bidsignore: extra_data/       # Semicolon-separated list of entries that are added to the .bidsignore file (for more info, see BIDS specifications), e.g. extra_data/;pet/;myfile.txt;yourfile.csv
    subprefix: sub-               # The default subject prefix of the source data
    sesprefix: ses-               # The default session prefix of the source data
  plugins:                        # List of plugins with plugin-specific key-value pairs (that can be used by the plugin)
    README:                       # The plugin basename that is installed in the default bidscoin/plugins folder
    dcm2bidsmap:                  # The default plugin that is used by the bidsmapper to map DICOM and PAR/REC source data
    dcm2niix2bids:                # See dcm2niix -h and https://www.nitrc.org/plugins/mwiki/index.php/dcm2nii:MainPage#General_Usage for more info
      path: module add dcm2niix;  # Command to set the path to dcm2niix (note the semi-colon), e.g. module add dcm2niix/1.0.20180622; or PATH=/opt/dcm2niix/bin:$PATH; or /opt/dcm2niix/bin/ or '"C:\Program Files\dcm2niix\"' (note the quotes to deal with the whitespace)
      args: -b y -z y -i n        # Argument string that is passed to dcm2niix. Tip: SPM users may want to use '-z n' (which produces unzipped nifti's, see dcm2niix -h for more information)
    sova2coin:                    # sovabids module
      rules : {}                  # 


EEG:
# --------------------------------------------------------------------------------
# EEG key-value heuristics (sovabids fields that are mapped to the BIDS labels)
# --------------------------------------------------------------------------------
  subject: <<entities.subject>>
  session: <<entities.session>>

  eeg:       # ----------------------- All eeg runs --------------------
  - provenance:                   # The fullpath name of the DICOM file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    properties: &fileprop         # This is an optional (stub) entry of filesystem matching (could be added to any run-item)
      filepath:                   # File folder, e.g. ".*Parkinson.*" or ".*(phantom|bottle).*"
      filename:      .*           # File name, e.g. ".*fmap.*" or ".*(fmap|field.?map|B0.?map).*"
      filesize:                   # File size, e.g. "2[4-6]\d MB" for matching files between 240-269 MB
      nrfiles:                    # Number of files in the folder that match the above criteria, e.g. "5/d/d" for matching a number between 500-599
    attributes: &eeg_attr         # An empty / non-matching reference dictionary that can be derefenced in other run-items of this data type
      sidecar:
      channels.name:
      channels.type:
      channels.units:
      entities.subject:
      entities.task:
      entities.session:
      entities.run:
      dataset_description:
    bids: &eeg_bids               # See: schema/datatypes/eeg.yaml
      task: <<entities.task>>     # Note Dynamic values are not previewed in the bids editor but they do work, this should be fixed anyway
      acq: 
      run: <<entities.run>>       
      suffix: eeg
    meta:                         # This is an optional entry for meta-data that will be appended to the json sidecar files. Currently not supported in sova2coin.